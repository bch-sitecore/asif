[CmdletBinding()]
Param(
  # [Parameter(Mandatory = $true)]
  # [ValidateNotNullOrEmpty()]
  # [string]$SitecoreDevUsername
  # ,
  # [Parameter(Mandatory = $true)]
  # [ValidateNotNullOrEmpty()]
  # [string]$SitecoreDevPassword
  # ,
  [Parameter()]
  [string]$Repository = "asif"
  ,
  [switch]$Publish
)
$ErrorActionPreference = "Stop"

$src = Join-Path $PSScriptRoot -ChildPath "src"
$dist = Join-Path $PSScriptRoot -ChildPath "resourcefiles"
$output = Join-Path $dist -ChildPath "SIF.Extension.ASIF.ps1"

Write-Output "Cleaning ${dist}"
If (Test-Path $dist) {
  Remove-item $dist -Exclude "*.zip", "*.xml", "*.json" -Recurse
}
if (!(Test-Path $dist)) {
  New-Item $dist -ItemType Directory | Out-Null
}

Get-ChildItem $src -Include "*.json" -Recurse | Copy-Item -Destination $dist -Force

"#`n# Auto-generated by build, do not modify this file directly.`n#" | Set-Content $output
Get-ChildItem $src -Include "*.ps1" -Exclude "*.Tests.ps1" -Recurse | ForEach-Object {
  $script = $_.FullName
  $scriptName = $_.Name

  Write-Output "Analyzing ${scriptName}"
  $analysis = Invoke-ScriptAnalyzer $script -Severity Error -Fix
  Get-ScriptAnalyzerRule | ForEach-Object {
    $ruleName = $_
    
    If ($analysis.RuleName -contains $ruleName) {
      $analysis | Where-Object "RuleName" -EQ $ruleName -OutVariable "failures" | Out-Default
      If ($failures.Count) {
        Write-Warning "${ruleName} has $($failures.Count) failures."
      }
    }
  }

  "<# ${scriptName} #>" | Add-Content $output
  Get-Content $script | Add-Content $output
}

$builds = @()
If (Test-Path env:APPVEYOR) {
  # It takes ~20 minutes for AV to pull a microsoft/aspnet image. AV has a cached
  # version (w/ digest below) so we're going to try to use that. :fingers_crossed:
  $appveyorBase = 'microsoft/aspnet@sha256:7cdafe834e1c08ed880cd54183ba33d4760c8b19e651ef1cbff0cf3118684e88'
  $builds += @{
    Base = $appveyorBase
    Tag = @("sc90u2-aspnet", "appveyor")
  }
} Else {
  $builds += @{
    Base = "microsoft/aspnet:4.6.2"
    Tag = @("sc90u2-aspnet4.6.2")
  }
  # $builds += @{
  #   Base = "microsoft/aspnet:4.7"
  #   Tag = @("sc90u2-aspnet4.7")
  # }
  # $builds += @{
  #   Base = "microsoft/aspnet:4.7.1"
  #   Tag = @("sc90u2-aspnet4.7.1")
  # }
  # $builds += @{
  #   Base = "microsoft/aspnet:4.7.2"
  #   Tag = @("sc90u2-aspnet4.7.2", "latest")
  # }
}
($builds | Select-Object -Last 1).Tags += "latest"

$builds | ForEach-Object {
  $base = $_.Base
  $dockerfile = If ($_.ContainsKey("Dockerfile") -and $_.Dockerfile) { $_.Dockerfile } { $null }
  $tag = $_.Tag

  $buildArgs = @("build")
  $buildArgs += @("--build-arg", "BASEIMAGE=${base}")
  # $buildArgs += @("--build-arg", "SitecoreDevUsername=${SitecoreDevUsername}")
  # $buildArgs += @("--build-arg", "SitecoreDevPassword=${SitecoreDevPassword}")
  $tag | ForEach-Object { $buildArgs += @("--tag", "${Repository}:${_}") }
  If ($dockerfile) { $buildArgs += @("--file", $dockerfile) }
  $buildArgs += "."

  Write-Output "Building ${Repository}:${tag} atop ${base}"
  & docker $buildArgs
  If ($LASTEXITCODE) {
    Write-Error "Non-zero exit code ${LASTEXITCODE} while building ${tag}"
  } ElseIf ($Publish) {
    $tag | ForEach-Object {
      Write-Output "Publishing ${Repository}:${_} to docker"
      docker push "${Repository}:${_}"
    }
  }
}

Write-Output "Build complete."